// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/redis/go-redis/v9"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	"gorm.io/gorm"
	"webapp/internal/api/middleware"
	"webapp/internal/api/routes"
	"webapp/internal/infrastructure/cache"
	"webapp/internal/infrastructure/database"
	"webapp/internal/repositories"
	"webapp/internal/services"
)

import (
	_ "webapp/docs"
)

// Injectors from wire.go:

func InitializeApp() (*gin.Engine, error) {
	db := database.ConnectDb()
	addressServiceInterface := services.NewAddressService(db)
	client := cache.ConnectRedis()
	accountRepositoryInterface := repositories.NewAccountRepository(db)
	accountServiceInterface := services.NewAccountService(db, addressServiceInterface, client, accountRepositoryInterface)
	engine := ProvideRouter(accountServiceInterface, client)
	return engine, nil
}

// wire.go:

func ProvideAddressService(db *gorm.DB) services.AddressServiceInterface {
	return services.NewAddressService(db)
}

// ProvideRouter wires all middleware and routes
func ProvideRouter(
	accountService services.AccountServiceInterface,
	redisClient *redis.Client,
) *gin.Engine {
	r := gin.Default()
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Use(middleware.CORSMiddleware())
	r.Use(middleware.RateLimitMiddleware())
	routes.RegisterRoutes(r, accountService, redisClient)
	return r
}
