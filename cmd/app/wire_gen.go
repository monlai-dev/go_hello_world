// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/redis/go-redis/v9"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	_ "gorm.io/gorm"
	"log"
	"webapp/internal/api/middleware"
	"webapp/internal/api/routes"
	"webapp/internal/infrastructure/cache"
	"webapp/internal/infrastructure/database"
	"webapp/internal/repositories"
	"webapp/internal/services"
)

// Injectors from wire.go:

func InitializeApp() (*gin.Engine, error) {
	db := database.ConnectDb()
	client := cache.ConnectRedis()

	addressServiceInterface := services.NewAddressService(db)

	theaterReposiroty := repositories.NewTheaterRepository(db)
	theaterServiceInterface := services.NewTheaterService(theaterReposiroty, db)

	roomRepositoy := repositories.NewRoomRepository(db)
	roomServiceInterface := services.NewRoomService(db, roomRepositoy, theaterServiceInterface)

	accountRepositoryInterface := repositories.NewAccountRepository(db)
	accountServiceInterface := services.NewAccountService(db, addressServiceInterface, client, accountRepositoryInterface)

	movieRepository := repositories.NewMovieRepository(db)
	movieServiceInterface := services.NewMovieService(movieRepository, client)

	slotRepository := repositories.NewSlotRepository(db)
	slotServiceInterface := services.NewSlotService(slotRepository, roomServiceInterface, movieServiceInterface, client)

	seatRepository := repositories.NewSeatRepository(db)
	seatServiceInterface := services.NewSeatService(seatRepository, roomServiceInterface)

	bookedSeatRepository := repositories.NewBookedRepository(db)
	bookedSeatServiceInterface := services.NewBookedService(bookedSeatRepository)

	cronJobService := services.NewCronJobService()

	bookingRepository := repositories.NewBookingRepository(db)
	bookingServiceInterface := services.NewBookingService(bookingRepository, movieServiceInterface, bookedSeatServiceInterface, client, seatServiceInterface, slotServiceInterface, cronJobService)

	paymentService := services.NewPaymentService(slotServiceInterface, bookingServiceInterface, seatServiceInterface, bookedSeatServiceInterface)


	_ ,err := cronJobService.AddFunc("@every 1m", func() {
		log.Printf("Running scheduler")
		err := bookingServiceInterface.Scheduler()
		if err != nil {
			log.Printf("Error while running scheduler: %v", err)
		}
	})

	if err != nil {
		log.Printf("Error while adding cron job: %v", err)
	}

	cronJobService.StartCronJob()

	engine := ProvideRouter(accountServiceInterface,
		client,
		roomServiceInterface,
		theaterServiceInterface,
		slotServiceInterface,
		movieServiceInterface,
		bookingServiceInterface,
		seatServiceInterface,
		paymentService)
	return engine, nil
}

// ProvideRouter wires all middleware and routes
func ProvideRouter(
	accountService services.AccountServiceInterface,
	redisClient *redis.Client,
	roomServiceInterface services.RoomServiceInterface,
	theaterServiceInterface services.TheaterServiceInterface,
	slotServiceInterface services.SlotServiceInterface,
	movieService services.MovieServiceInterface,
	bookingServiceInterface services.BookingServiceInterface,
	seatServiceInterface services.SeatServiceInterface,
	paymentService services.PaymentServiceInterface,
) *gin.Engine {
	r := gin.Default()
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Use(middleware.CORSMiddleware())
	r.Use(middleware.RateLimitMiddleware())

	routes.RegisterRoutes(r,
		accountService,
		redisClient,
		roomServiceInterface,
		theaterServiceInterface,
		slotServiceInterface,
		movieService,
		bookingServiceInterface,
		seatServiceInterface,
		paymentService)
	return r
}
